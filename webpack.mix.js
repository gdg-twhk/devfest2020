let mix = require('laravel-mix');
require('laravel-mix-ejs');

let path = require('path');
let SpritesmithPlugin = require('webpack-spritesmith');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

const transfer = (temp) => {
    const result = {
        1: [],
        2: [],
        3: [],
        4: [],
    };
    return Object.keys(temp).reduce((acc, time) => {
        temp[time].forEach((data, i) => {
            if (data.title && data.description) {
                acc[i + 1].push(data);
            }
        });

        return acc;
    }, result);
};

const Taiwan = transfer(require('./src/data/agenda-taiwan.json'));

const HongKong = {};
HongKong[1] = transfer(require('./src/data/devfesthk_day1.json'))[1];
HongKong[2] = transfer(require('./src/data/devfesthk_day2.json'))[1];
HongKong[3] = transfer(require('./src/data/devfesthk_day3.json'))[1];
HongKong[4] = transfer(require('./src/data/devfesthk_day4.json'))[1];

mix.js('src/js/app.js', 'public/js/')
    .ejs(
        'src/ejs',
        'public',
        {
            agenda: {
                Taiwan,
                HongKong,
            },
        },
        { base: 'src/ejs', partials: 'src/ejs/partials' },
    )
    .sass('src/scss/app.scss', 'public/css/')
    .copy('src/images/speaker/*', 'public/images/speaker')
    // .copy('node_modules/bootstrap-ie8/css/*.css', 'public/css')
    // .copy('node_modules/bootstrap-ie8/js/*.js', 'public/js')
    .setPublicPath('public')
    .webpackConfig({
        resolve: { modules: ['node_modules', 'spritesmith-generated'] },
        plugins: [
            new SpritesmithPlugin({
                src: { cwd: path.resolve(__dirname, 'src/ico'), glob: '*.png' },
                target: {
                    image: path.resolve(
                        __dirname,
                        'src/spritesmith-generated/sprite.png',
                    ),
                    css: path.resolve(
                        __dirname,
                        'src/spritesmith-generated/sprite.scss',
                    ),
                },
                apiOptions: { cssImageRef: '~sprite.png' },
            }),
        ],
    })
    .browserSync('http://devfest2020.test');

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.when(condition, function (mix) {}) <-- Call function if condition is true.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
